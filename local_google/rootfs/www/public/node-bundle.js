(()=>{"use strict";const e=require("buffer"),t="0.0.141";var o=smarthome.App,s=smarthome.IntentFlow,a=s.ErrorCode,r=smarthome.Intents,n=smarthome.DataFlow,c=smarthome.Constants,i=smarthome.Execute;const d=new o(t);d.onIdentify((async o=>{console.debug("onIdentify request");const s=o.inputs[0].payload.device;if(void 0===s.udpScanData)throw Error(`identify request is missing discovery response: ${o}`);const a=e.Buffer.from(s.udpScanData.data,"hex"),n=JSON.parse(a.toString());console.log("discoveryData:",n);const c={intent:r.IDENTIFY,requestId:o.requestId,payload:{device:{id:n.id,isLocalOnly:n.isLocalOnly,isProxy:n.isProxy,deviceInfo:{hwVersion:"UNKNOWN_HW_VERSION",manufacturer:"Home Assistant",model:"Home Assistant",swVersion:t}}}};return console.debug("IDENTIFY response",c),c})).onReachableDevices((async e=>{console.debug("onReachableDevices request",e.requestId);const t=await d.getDeviceManager(),o=e.inputs[0].payload.device.id;console.debug("onReachableDevices proxyDeviceId",o);const s=new n.HttpRequestData;s.protocol=c.Protocol.HTTP,s.method=c.HttpOperation.GET,s.requestId=e.requestId,s.deviceId=o,s.port=8089,s.path="/api/local/reachableDevices",s.dataType="application/json",s.additionalHeaders={};try{let o=await t.send(s);const a=JSON.parse(o.httpResponse.body);console.debug("onReachableDevices serverDevices",a);const n={intent:r.REACHABLE_DEVICES,requestId:e.requestId,payload:{devices:a.map((e=>({verificationId:`local_${e.id}`})))}};return console.debug("onReachableDevices response",n),n}catch(e){throw console.error("Error making request",e),e}})).onQuery((async e=>{console.debug("onQuery request");const t=e.inputs[0].payload;console.log("payload",t);const o=await d.getDeviceManager(),r=new n.HttpRequestData;let i;r.protocol=c.Protocol.HTTP,r.method=c.HttpOperation.POST,r.requestId=e.requestId,r.port=8089,r.path="/api/local/query",r.data=JSON.stringify(t),r.dataType="application/json",r.additionalHeaders={};try{i=await o.send(r),console.log("onQuery rawResponse",i.httpResponse.statusCode,i.httpResponse.body)}catch(e){throw console.error("onQuery",e),e}throw e.requestId,new s.HandlerError(e.requestId,a.GENERIC_ERROR,"onQuery testing")})).onExecute((async e=>{console.debug("onExecute request"),console.debug("EXECUTE request",e);const t=(new i.Response.Builder).setRequestId(e.requestId),o=await d.getDeviceManager(),s=e.inputs[0].payload.commands[0];return console.log("command",s),Promise.all(s.devices.map((async s=>{const r=new n.HttpRequestData;let i;r.protocol=c.Protocol.HTTP,r.method=c.HttpOperation.POST,r.requestId=e.requestId,r.port=8089,r.path="/api/local/execute",r.data=JSON.stringify(s),r.dataType="application/json",r.additionalHeaders={};try{i=await o.send(r),console.error("Request",i.httpResponse.statusCode),t.setErrorState(s.id,a.GENERIC_ERROR)}catch(e){console.error("Request Failed",e),t.setErrorState(s.id,a.GENERIC_ERROR)}}))).then((()=>(console.debug("EXECUTE response",t),t.build())))})).listen().then((()=>{console.log("Ready to listen HA Agent")})).catch((e=>console.error("App Error",e)))})();