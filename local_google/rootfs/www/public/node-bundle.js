(()=>{"use strict";const e=require("buffer"),o="0.0.155";var t=smarthome.App,s=smarthome.IntentFlow.ErrorCode,a=smarthome.Intents,n=smarthome.DataFlow,r=smarthome.Constants,c=smarthome.Execute;const d=new t(o);d.onIdentify((async t=>{console.debug("onIdentify request");const s=t.inputs[0].payload.device;if(void 0===s.udpScanData)throw Error(`identify request is missing discovery response: ${t}`);const n=e.Buffer.from(s.udpScanData.data,"hex"),r=JSON.parse(n.toString());console.log("discoveryData:",r);const c={intent:a.IDENTIFY,requestId:t.requestId,payload:{device:{id:r.id,isLocalOnly:r.isLocalOnly,isProxy:r.isProxy,deviceInfo:{hwVersion:"UNKNOWN_HW_VERSION",manufacturer:"Home Assistant",model:"Home Assistant",swVersion:o}}}};return console.debug("IDENTIFY response",c),c})).onReachableDevices((async e=>{console.debug("onReachableDevices request",e.requestId);const o=await d.getDeviceManager(),t=e.inputs[0].payload.device.id;console.debug("onReachableDevices proxyDeviceId",t);const s=new n.HttpRequestData;s.protocol=r.Protocol.HTTP,s.method=r.HttpOperation.GET,s.requestId=e.requestId,s.deviceId=t,s.port=8089,s.path="/api/local/reachableDevices",s.dataType="application/json",s.additionalHeaders={};try{let t=await o.send(s);const n=JSON.parse(t.httpResponse.body);console.debug("onReachableDevices serverDevices",n);const r=n.map((e=>({verificationId:e.localId})));console.debug("onReachableDevices devices",r),console.debug("onReachableDevices devices stringify",JSON.parse(JSON.stringify(r)));const c={intent:a.REACHABLE_DEVICES,requestId:e.requestId,payload:{devices:r}};return console.debug("onReachableDevices response",c),c}catch(e){throw console.error("Error making request",e),e}})).onQuery((async e=>{console.debug("onQuery request");const o=e.inputs[0].payload,t=o.devices;console.log("payload",o);const s=await d.getDeviceManager(),a=[];for(const o of t){const t=new n.HttpRequestData;let c;t.protocol=r.Protocol.HTTP,t.method=r.HttpOperation.POST,t.requestId=e.requestId,t.deviceId=o.id,t.port=8089,t.path="/api/local/query",t.dataType="application/json",t.additionalHeaders={};try{c=await s.send(t),console.log("onQuery rawResponse",c.httpResponse.statusCode,c.httpResponse.body),a.push(...c.httpResponse.body.devices)}catch(e){throw console.error("onQuery",e),e}}return console.log("onQuery result",a),{requestId:e.requestId,payload:{devices:a}}})).onExecute((async e=>{console.debug("onExecute request"),console.debug("EXECUTE request",e);const o=(new c.Response.Builder).setRequestId(e.requestId),t=await d.getDeviceManager(),a=e.inputs[0].payload.commands[0];console.log("command",a);const i=new n.HttpRequestData;let l;i.protocol=r.Protocol.HTTP,i.method=r.HttpOperation.POST,i.requestId=e.requestId,i.deviceId=a.devices[0].id,i.port=8089,i.path="/api/local/execute",i.data=JSON.stringify(a),i.dataType="application/json",i.additionalHeaders={};try{l=await t.send(i),console.error("Request",l.httpResponse.statusCode),o.setErrorState(a.devices[0].id,s.GENERIC_ERROR)}catch(e){console.error("Request Failed",e),o.setErrorState(a.devices[0].id,s.GENERIC_ERROR)}return console.log("onExecute response",o),o.build()})).listen().then((()=>{console.log("Ready to listen HA Agent",o)})).catch((e=>console.error("App Error",e)))})();