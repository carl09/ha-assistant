(()=>{"use strict";const e=require("buffer"),o="0.0.143";var t=smarthome.App,s=smarthome.IntentFlow,a=s.ErrorCode,n=smarthome.Intents,r=smarthome.DataFlow,c=smarthome.Constants,d=smarthome.Execute;const i=new t(o);i.onIdentify((async t=>{console.debug("onIdentify request");const s=t.inputs[0].payload.device;if(void 0===s.udpScanData)throw Error(`identify request is missing discovery response: ${t}`);const a=e.Buffer.from(s.udpScanData.data,"hex"),r=JSON.parse(a.toString());console.log("discoveryData:",r);const c={intent:n.IDENTIFY,requestId:t.requestId,payload:{device:{id:r.id,isLocalOnly:r.isLocalOnly,isProxy:r.isProxy,deviceInfo:{hwVersion:"UNKNOWN_HW_VERSION",manufacturer:"Home Assistant",model:"Home Assistant",swVersion:o}}}};return console.debug("IDENTIFY response",c),c})).onReachableDevices((async e=>{console.debug("onReachableDevices request",e.requestId);const o=await i.getDeviceManager(),t=e.inputs[0].payload.device.id;console.debug("onReachableDevices proxyDeviceId",t);const s=new r.HttpRequestData;s.protocol=c.Protocol.HTTP,s.method=c.HttpOperation.GET,s.requestId=e.requestId,s.deviceId=t,s.port=8089,s.path="/api/local/reachableDevices",s.dataType="application/json",s.additionalHeaders={};try{let t=await o.send(s);const a=JSON.parse(t.httpResponse.body);console.debug("onReachableDevices serverDevices",a);const r=a.map((e=>({verificationId:e.localId,id:e.deviceId})));console.debug("onReachableDevices devices",r);const c={intent:n.REACHABLE_DEVICES,requestId:e.requestId,payload:{devices:r}};return console.debug("onReachableDevices response",c),c}catch(e){throw console.error("Error making request",e),e}})).onQuery((async e=>{console.debug("onQuery request");const o=e.inputs[0].payload;console.log("payload",o);const t=await i.getDeviceManager(),n=new r.HttpRequestData;let d;n.protocol=c.Protocol.HTTP,n.method=c.HttpOperation.POST,n.requestId=e.requestId,n.port=8089,n.path="/api/local/query",n.data=JSON.stringify(o),n.dataType="application/json",n.additionalHeaders={};try{d=await t.send(n),console.log("onQuery rawResponse",d.httpResponse.statusCode,d.httpResponse.body)}catch(e){throw console.error("onQuery",e),e}throw e.requestId,new s.HandlerError(e.requestId,a.GENERIC_ERROR,"onQuery testing")})).onExecute((async e=>{console.debug("onExecute request"),console.debug("EXECUTE request",e);const o=(new d.Response.Builder).setRequestId(e.requestId),t=await i.getDeviceManager(),s=e.inputs[0].payload.commands[0];return console.log("command",s),Promise.all(s.devices.map((async s=>{const n=new r.HttpRequestData;let d;n.protocol=c.Protocol.HTTP,n.method=c.HttpOperation.POST,n.requestId=e.requestId,n.port=8089,n.path="/api/local/execute",n.data=JSON.stringify(s),n.dataType="application/json",n.additionalHeaders={};try{d=await t.send(n),console.error("Request",d.httpResponse.statusCode),o.setErrorState(s.id,a.GENERIC_ERROR)}catch(e){console.error("Request Failed",e),o.setErrorState(s.id,a.GENERIC_ERROR)}}))).then((()=>(console.debug("EXECUTE response",o),o.build())))})).listen().then((()=>{console.log("Ready to listen HA Agent")})).catch((e=>console.error("App Error",e)))})();