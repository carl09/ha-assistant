(()=>{"use strict";const e=require("buffer"),o="0.0.186";var t=smarthome.App,s=smarthome.IntentFlow.ErrorCode,n=smarthome.Intents,a=smarthome.DataFlow,r=smarthome.Constants,c=smarthome.Execute;const i=new t(o);i.onIdentify((async t=>{console.debug("onIdentify request");const s=t.inputs[0].payload.device;if(void 0===s.udpScanData)throw Error(`identify request is missing discovery response: ${t}`);const a=e.Buffer.from(s.udpScanData.data,"hex"),r=JSON.parse(a.toString());console.log("discoveryData:",r);const c={intent:n.IDENTIFY,requestId:t.requestId,payload:{device:{id:r.id,isLocalOnly:r.isLocalOnly,isProxy:r.isProxy,deviceInfo:{hwVersion:"UNKNOWN_HW_VERSION",manufacturer:"Home Assistant",model:"Home Assistant",swVersion:o}}}};return console.debug("IDENTIFY response",c),c})).onReachableDevices((async e=>{console.debug("onReachableDevices request",e.requestId);const o=await i.getDeviceManager(),t=e.inputs[0].payload.device.id;console.debug("onReachableDevices proxyDeviceId",t);const s=new a.HttpRequestData;s.protocol=r.Protocol.HTTP,s.method=r.HttpOperation.GET,s.requestId=e.requestId,s.deviceId=t,s.port=8089,s.path="/api/local/reachableDevices",s.dataType="application/json",s.additionalHeaders={};try{let t=await o.send(s);const a=JSON.parse(t.httpResponse.body);console.debug("onReachableDevices serverDevices",a);const r=a.map((e=>({verificationId:e.localId})));console.debug("onReachableDevices devices",r),console.debug("onReachableDevices devices stringify",JSON.parse(JSON.stringify(r)));const c={intent:n.REACHABLE_DEVICES,requestId:e.requestId,payload:{devices:r}};return console.debug("onReachableDevices response",c),c}catch(e){throw console.error("Error making request",e),e}})).onQuery((async e=>{console.debug("onQuery request");const o=e.inputs[0].payload,t=o.devices;console.log("payload",o);const s=await i.getDeviceManager();let n={};for(const o of t){const t=new a.HttpRequestData;let c;t.protocol=r.Protocol.HTTP,t.method=r.HttpOperation.POST,t.requestId=e.requestId,t.deviceId=o.id,t.port=8089,t.path="/api/local/query",t.dataType="application/json",t.additionalHeaders={},t.data=JSON.stringify({devices:[o]});try{c=await s.send(t),console.log("onQuery rawResponse",c.httpResponse.statusCode,c.httpResponse.body);const e="string"==typeof c.httpResponse.body?JSON.parse(c.httpResponse.body):c.httpResponse.body;n={...n,...e.devices}}catch(e){throw console.error("onQuery",e),e}}return console.log("onQuery result",JSON.parse(JSON.stringify(n))),{requestId:e.requestId,payload:{devices:n}}})).onExecute((async e=>{console.debug("onExecute request"),console.debug("EXECUTE request",e);const o=(new c.Response.Builder).setRequestId(e.requestId),t=await i.getDeviceManager(),n=e.inputs[0].payload.commands,d=n[0],l=d.devices[0].id;console.log("commands",n,l);const p=new a.HttpRequestData;let u;p.protocol=r.Protocol.HTTP,p.method=r.HttpOperation.POST,p.requestId=e.requestId,p.deviceId=l,p.port=8089,p.path="/api/local/execute",p.data=JSON.stringify(n),p.dataType="application/json",p.additionalHeaders={};try{u=await t.send(p),console.debug("Request statusCode",u.httpResponse.statusCode),console.log("onExecute response",JSON.stringify(u)),o.setSuccessState(d.devices[0].id,{})}catch(e){console.error("Request Failed",e),o.setErrorState(d.devices[0].id,s.GENERIC_ERROR)}return console.log("onExecute response stringify",JSON.parse(JSON.stringify(o.build()))),o.build()})).listen().then((()=>{console.log("Ready to listen HA Agent",o)})).catch((e=>console.error("App Error",e)))})();